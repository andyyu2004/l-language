// fn test'(f:(Bool, Bool) -> Bool, x:Bool) -> Bool -> Bool {}

// fn test(f:(Bool, Bool) -> Bool, x:Bool) -> Bool {}

// fn f(a: Bool, b: Bool) -> Bool {}

fn curried = a: Int => b: Int : Int { a + b ! }

fn higherOrder(f: Int -> Int -> Int) -> Unit { f 3 6; }

// test(f, true)

curried 4 6;

higherOrder curried;
