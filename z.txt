{
    data List = Nil | Cons Int List;

    fn map = f: Int -> Int => xs: List: List {
        match xs {
            | Cons x xs -> Cons (f x) (map f xs)
            | Nil -> Nil
        }     
    }

    fn times_3(n: Int) -> Int { n * 3 }

    map times_3!
    let xs = Cons 0 (Cons 1 (Cons 2 (Cons 3 (Cons 4 Nil))));

    map times_3 xs!

    map (\x: Int => x * 2) xs !

}