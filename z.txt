
// Polymorphic ADTs
{    
    data List<'a> = Nil | Cons 'a List<'a>;
    let xs = Cons 5 (Cons 6 Nil);

    fn map = f: 'a -> 'b => xs: List<'a> : List<'b, 'a> {
        match xs {
            | Cons x xs -> Cons (f x) (map f xs)
            | Nil -> Nil
        }
    }

    map (\x: Int => \y: Int => x + y) xs !

    map (\x: Int => x * 3) xs !

    map (\x: Int => x % 2 == 0) xs !

}