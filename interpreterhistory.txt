let (Cons x y) = 4;
data List = Nil | Cons Int List;
let (Cons x y) = 4;
let (Cons x y) = Nil;
let (a,b,c) = 45;;
let (a,b,c) = 45;
let x = 5;
x
match 5 {}
match 5 {| 5 -> {5} | 4 -> {}}
match 5 {| x -> {5} | y -> {}}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5}}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5}}
if let x = 5 {}
if let x = 5 {5}
if let x = 5 {}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5} | y -> {99}}
match 5 {| x -> {5} | y -> {y}}
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
{ fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}} }
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List {match xs {| Cons x xs -> Cons (f x) (map f xs)| Nil -> Nil}     
fn map = f: Int -> Int => xs: List {match xs {| Cons x xs -> Cons (f x) (map f xs)| Nil -> Nil}}
let x = 5;
x *= 2
var x = 5;
x *= 2
2/4
let x = 1024
var x = 1024;
x /= 2
\x -> 3
\x y z-> 3
\x y z -> 3
map \x -> x * 2 
map \x -> x * 2 xs
map (\x -> x * 2) xs
if let () = () { "yay"! }
if let 5 = () { "yay"! }
if let () = () { "yay"! }
if let () = 5 { "yay"! }
if let () = () { "yay"! }
if let 5 = () { "yay"! }
if let x  = () { "yay"! }
if let x = () { "yay"! }
x
if let x = () { "yay"! }
if let () = () { "yay"! }
if let () = 5 { "yay"! }
if let 3 = 5 { "yay"! }
if let 6 = 5 { "yay"! }
if let 6 = 6 { "yay"! }
\x -> \y -> 4
\x -> \y -> x
let x = \x -> \y -> x;
let x = \x -> \y -> 5;
var x = \x -> \y -> 5;
let x = \x -> \y -> x;
\x -> \y -> x;
\x: Int -> \y: Bool -> x;
\x -> \y -> x;
\x: Bool -> \y -> x;
\x: Bool => \y => x;
\x => \y => x;
\x:Bool => \y => x;
\x:Bool => \y: Int => x;
\x:Bool => \y: Int => x + y;
\x:Bool => \y: Int => x;
let f = \x: Int -> x
let f = \x: Int => x;
f 5
let f = \x: Int => x;
f 5
let f = \x: Int => x;
f 5
let f = \x: Int => x;
f 5
let B = F | T;
data B = F | T;
let f = \B: Int => x;
let f = \B: Int => false;
let f = \x: Int => x;
f 4
f 88
let f = \x: Int => \y: Int => x + y
let f = \x: Int => \y: Int => x + y;
f 3;
let add3 = f 3;
add3 5
let des = \(a,b,c) : (Int, Int, Int) => {a! b! c!}
let des = \(a,b,c) : (Int, Int, Int) => {a! b! c!};
des (1,2,3)
let add = x: Int => y: Int => x + y;
