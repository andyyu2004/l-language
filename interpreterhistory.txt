data Test = Test Int Bool Int;
Test 5
Test 5 5
Test 5 false
Test 5 false r
Test 5 false 5
data Test = Test Int Bool Int;
Test 5 false 5
data Test = Test Int Bool Int | Nil;
Nil
data Test = Test Int Bool Int | Nil;
Test 5 false 5
data Test = Test Int Bool Int | Nil;
Test 5 false 5
Nil
data Test = Test Int Bool Int | Nil;
Nil
data Test = Test Int Bool Int | Nil;
Test 5 false 5
data List = Nil | Cons Number List;
let xs = Cons 5 (Cons 6 Nil);
xs
let xs = Cons 5 (Cons 6 Nil);
data List = Nil | Cons Number List;
let xs = Cons 5 (Cons 6 Nil);
Nil
Cons
Cons 3
Cons 3 No;
Cons 3 Nil
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil {}
if let Cons x xs = Cons 3 Nil { x }
if let Cons x xs = Cons 3 Nil { x } else { -999 }
data List = Nil | Cons Number List;
if let Cons x xs = Cons 3 Nil { x } else { -999 }
if let Cons x xs = Cons 3 Nil { x! xs! }
if let Cons x xs = Cons (Cons 3 Nil) Nil { x! xs! }
if let Cons x xs = Cons 4 (Cons 3 Nil) { x! xs! }
[200~data List = Nil | Cons Number List;
data List = Nil | Cons Number List;
if let Cons x = Cons 4 6 {}
if let Cons x xs = Cons 4 6 {}
if let Cons x xs = Cons 4 Nil {}
if let Cons x = Cons 4 Nil {}
if let Cons x = Cons 4 Nil { x }
if let Cons x = Cons 4 Nil { x } else { Cons }
if let Cons x = Cons 4 Nil { x! } 
data List = Nil | Cons Number List;
if let Cons x = Cons 4 Nil { x! } 
if let Cons x xs = Cons 4 Nil { x! } 
let t = (1,2,3);
if let (a, b, c) = t { a! b! c! }
"sdf"
"asd"
"asd" !
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
fn x2 = n: Int : Int { 2 * n }
let xs = Cons 4 Nil;
map x2 xs !
Cons
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
fn x2 = n: Int : Int { 2 * n }
let xs = Cons 4 Nil;
map x2 xs !
data Either = Left Bool | Right Int;
fn test = e: Either {
        if let Left b = x {
            b !
        } else if let Right i = x {
            i !
        }
    }
(e)
(2)
(6)
2 * (4+7)
fn f(x: Int) -> Bool { false }
2 * (4+7)
fn f(x: Int) -> Bool { false }
f(4)
f()
f(6)
