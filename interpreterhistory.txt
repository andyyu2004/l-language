f 2 "f" 4
let f(x: Int) { x }
fn f(x: Int) { x }
fn f(x: Int) { x ! }
f 5
data List<'a> = Nil | Cons 'a List<'a>
data List<'a> = Nil | Cons 'a List<'a>;
Cons 
Cons 5
Cons 
data List<'a> = Nil | Cons 'a List<'a>;
Cons
Cons 5
Cons "er"
data List<'a> = Nil | Cons 'a List<'a>;
Cons "er"
Cons 5
Cons 5 (Cons "f" Nil)
Cons 5
let i = Cons 5
let i = Cons 5;
let s = Cons "t";
i == t
i == s
i == i
i
i == i
i
let i = Cons 5;
i (Cons 7 Nil)
i (Cons "e" Nil)
data List<'a> = Nil | Cons 'a List<'a>;
let i = Cons 5;
i (Cons "e" Nil)
let i = Cons 5;
data List<'a> = Nil | Cons 'a List<'a>;
let i = Cons 5;
i (Cons "e" Nil)
data List = Nil | Cons 'a List
data List = Nil | Cons 'a List;
Cons 1 (Cons 2 Nil)
Cons 1 (Cons "df"  Nil)
data List = Nil | Cons 'a List;
data List<'a>  = Nil | Cons 'a List;
data List<'a>  = Nil | Cons 'a List<'b>;
data Either<'a, 'b>  = Left 'a | Right 'b;
data List<'a>  = Nil | Cons 'a List<'b>;
data List<'a, 'b>  = Nil | Cons 'a List<'b>;
data List<'a>  = Nil | Cons 'a List<'b>;
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5
Cons 5 7
Cons 5 (Cons "d")
Cons 5 (Cons "d" Nil)
Cons 5
Cons 5 (Cons 7 Nil)
Cons 5
let x = Cons 5;
x (Cons 7 Nil)
(Cons 7 Nil)
Nil
(Cons 7 Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
Cons
Cons 6
Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Nil = Nil
Nil == Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
Cons 5 (Cons 7 Nil)
Cons 5 (Cons "f"  Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 (Cons "f"  Nil)
Cons 5 (Cons 6 Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
fn f(xs: List<'a>) -> List<'a> { xs }
fn f(xs: List<'a>) -> List<'b> { xs }
data List<'a>  = Nil | Cons 'a List<'a>;
fn f(xs: List<'a>) -> List<'b> { xs }
fn f(xs: List<'a>) -> List<'b, 'a> { xs }
fn f(xs: List<'a>) -> List<'b> { xs }
fn f(xs: List<'a>) -> List<'a> { xs }
