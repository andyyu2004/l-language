if let (a, b, c) = t { a! b! c! }
"sdf"
"asd"
"asd" !
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
fn x2 = n: Int : Int { 2 * n }
let xs = Cons 4 Nil;
map x2 xs !
Cons
data List = Nil | Cons Number List;
fn map = f: Int -> Int => xs: List : List {if let Cons x xs = xs {Cons (f x) (map f xs)} else {Nil}}
fn x2 = n: Int : Int { 2 * n }
let xs = Cons 4 Nil;
map x2 xs !
data Either = Left Bool | Right Int;
fn test = e: Either {
        if let Left b = x {
            b !
        } else if let Right i = x {
            i !
        }
    }
(e)
(2)
(6)
2 * (4+7)
fn f(x: Int) -> Bool { false }
2 * (4+7)
fn f(x: Int) -> Bool { false }
f(4)
f()
f(6)
fn fib((n: Int)) ->  Int { 5 }
fn fib(n: Int) ->  Int { 5 }
fn fib(n: (Int)) ->  Int { 5 }
fn fib(n: (Int, Int)) ->  Int { 5 }
fib (5, 6)
fib ((5, 6))
fib (5, 6)
fn fac = n: Int : Int { if n < 2 { 1 } else { n + fac (n - 1) }}
fac 1400
fn fac = n: Int : Int { if n < 2 { 1 } else { n + fac (n - 1) }}
fac 200
2 % 4
2 % 5
!false
match 3 { x {}}
match 3 { | x {}}
match 3 { | x => {}}
match 3 { | x -> {}}
match 3 { | x => {}}
let (a,b,c) = (1,2,3);
a
b
c
let (a,b,c) = (1,2,3);
a
b
c
let (a,b,c) = (1,2,3, 5);
let (a,b,c) = (1,2,3,4);
a
b
c
d
let (a,b,c) = (1,2,3,4);
let Cons x y = 4;
let (Cons x y) = 4;
data List = Nil | Cons Int List;
let (Cons x y) = 4;
let (Cons x y) = Nil;
let (a,b,c) = 45;;
let (a,b,c) = 45;
let x = 5;
x
match 5 {}
match 5 {| 5 -> {5} | 4 -> {}}
match 5 {| x -> {5} | y -> {}}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5}}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5}}
if let x = 5 {}
if let x = 5 {5}
if let x = 5 {}
match 5 {| x -> {5} | y -> {5}}
match 5 {| x -> {5} | y -> {99}}
match 5 {| x -> {5} | y -> {y}}
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}}
{ fn map = f: Int -> Int => xs: List { match xs {| Cons x xs -> Cons (f x) (map f xs) | Nil -> Nil}} }
data List = Nil | Cons Int List;
fn map = f: Int -> Int => xs: List {match xs {| Cons x xs -> Cons (f x) (map f xs)| Nil -> Nil}     
fn map = f: Int -> Int => xs: List {match xs {| Cons x xs -> Cons (f x) (map f xs)| Nil -> Nil}}
