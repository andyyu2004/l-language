data List = Nil | Cons 'a List
data List = Nil | Cons 'a List;
Cons 1 (Cons 2 Nil)
Cons 1 (Cons "df"  Nil)
data List = Nil | Cons 'a List;
data List<'a>  = Nil | Cons 'a List;
data List<'a>  = Nil | Cons 'a List<'b>;
data Either<'a, 'b>  = Left 'a | Right 'b;
data List<'a>  = Nil | Cons 'a List<'b>;
data List<'a, 'b>  = Nil | Cons 'a List<'b>;
data List<'a>  = Nil | Cons 'a List<'b>;
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5
Cons 5 7
Cons 5 (Cons "d")
Cons 5 (Cons "d" Nil)
Cons 5
Cons 5 (Cons 7 Nil)
Cons 5
let x = Cons 5;
x (Cons 7 Nil)
(Cons 7 Nil)
Nil
(Cons 7 Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
Cons
Cons 6
Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Nil = Nil
Nil == Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 Nil
Cons 5 (Cons 7 Nil)
Cons 5 (Cons "f"  Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
Cons 5 (Cons "f"  Nil)
Cons 5 (Cons 6 Nil)
data List<'a>  = Nil | Cons 'a List<'a>;
fn f(xs: List<'a>) -> List<'a> { xs }
fn f(xs: List<'a>) -> List<'b> { xs }
data List<'a>  = Nil | Cons 'a List<'a>;
fn f(xs: List<'a>) -> List<'b> { xs }
fn f(xs: List<'a>) -> List<'b, 'a> { xs }
fn f(xs: List<'a>) -> List<'b> { xs }
fn f(xs: List<'a>) -> List<'a> { xs }
fn identity(x: 'a) -> 'a' { x }
fn identity(x: 'a) -> 'a { x }
identity 5
identity "stt"
data Boolean = False | True;
False
data List<'a> = Nil | Cons 'a List<'a>;
let listofstrings = Cons "t" Nil;
match listofstrings {| Cons x xs -> x| Nil -> "List is Nil"}
data List<'a> = Nil | Cons 'a List<'a>;
let listofstrings = Cons "t" Nil;
:tenv
if let false = false { 4! }
if let false = true { 4! }
if let 5 = 5 { 4! }
let _ = 5;
_
let _ = 5;
:tenv
let _ = 5;
fn recurse(n: Int) { n! recurse(n+1) }
recurse(0)
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1000
fib 1400
fib 1300
fib 1400
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1400
fib 1300
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1300
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1200
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1100
fn fib(n: Int) -> Int { if n < 2 { 1 } else { n + fib(n-1) } }
fib 1200
